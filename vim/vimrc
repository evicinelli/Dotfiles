" Vim-plug {{{
call plug#begin()
Plug 'tpope/vim-sensible'				" Sensible default
Plug 'scrooloose/nerdtree',	{'on': 'NERDTreeToggle'}" Nerdtree
Plug 'morhetz/gruvbox'					" Colorscheme
Plug 'junegunn/goyo.vim', 	{'on': 'Goyo'} 		" Goyo - distraction free writing
Plug 'airblade/vim-gitgutter'				" Git diff aside line numbers
Plug 'mhinz/vim-startify'				" Vim-startify
Plug 'tpope/vim-surround'				" Surrounding motions on steroid
Plug 'sheerun/vim-polyglot'				" A collection of language pack 
Plug 'freitass/todo.txt-vim'				" Todo.txt support
Plug 'majutsushi/tagbar',	{'on': 'Tagbar'}	" Tagbar
Plug 'mileszs/ack.vim'					" Vim Ack
Plug 'mtth/scratch.vim'					" Scratch buffer made easy
call plug#end()
"}}}
"
" General Settings {{{
syntax enable			" Enable syntax Highlighting
filetype plugin on		" Filetype plugin
filetype plugin indent on	" Specific indentation rules depending on file type 
set number relativenumber	" Line numbers are relative to current line
set path^=**			" Recursive file search starting from current dir
set wildmenu			" Tab autocompletion in menu
set wildignorecase		" Ignore case when autocomplete
set autoread			" Autoreload file if modified from external command
set hlsearch			" Highlight all search results
set smartcase			" Smart-case search
set ignorecase			" Case-insensitive
set incsearch			" Incremental search
set autoindent			" Auto-indent
set smartindent			" Smart indent
set smarttab			" Smart tabs
set shiftwidth=4		" Auto indent spaces
set foldmethod=marker		" Fold what's inside {{{ }}} block
set linebreak			" Break long lines at spaces, not in the middle of a word
set hidden			" Allow to switch buffer without saving it
set colorcolumn=+1		" Highlight column where the 81/th char lives
set shell=/bin/bash\ -i		" Which shell to use
set spelllang=it,en		" Spell dictionaries
"}}}

" Appearance {{{
set cursorline			" Highlight current line
set linespace=3			" Line spacing
set fillchars+=vert:\|		" Vertical separator char
set shortmess+=I		" No greetings
set list listchars=tab:·\ ,trail:·,eol:¬,extends:…,precedes:… " Non printable chars
set guifont=Inconsolata\ 12
colorscheme gruvbox		" Colorscheme 
if has("termguicolors")
    set termguicolors		" 256 color terminal support
endif
if has('gui_running')
    set guioptions-=m	"remove menu bar
    set guioptions-=T	"remove toolbar
    set guioptions-=r	"remove right-hand scroll bar
    set guioptions-=L	"remove left-hand scroll bar
    set guioptions-=b
    set guioptions-=e
    set bg=light
else
    set bg=dark
endif
" }}}

" Plugin settings {{{
let anyfold_activate = 1
let anyfold_fold_comments = 1
let g:startify_custom_header = [system("motivation")]
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 0
let NERDTreeChDirMode = 0
let g:goyo_height = 50
let g:goyo_width = 130
" }}}

" Statusline {{{
"set statusline=%=%n\ ·\ %F\ %m%r%h%w\ ·\ %Y\ ·\ %l:%v/%L\ ·\ %p%%
set statusline=%=%n\ \|\ %F\ %m%r%h%w\ \|\ %Y\ \|\ %l:%v/%L\ \|\ %p%%

" }}}

" Custom mappings {{{
noremap <C-l> gt<CR>
noremap <C-h> gT<CR>
noremap <C-n> :NERDTreeToggle<CR>
noremap <C-g> :Goyo<CR>
noremap <F1> nop
noremap Q :q!
noremap H ^
noremap L g_
noremap <leader>so :!xdg-open "%" <CR>
noremap <leader>a :Ack
noremap <F8> :se spell!<CR>
noremap viz [zjV]zk
inoremap { {}<Left>
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap " ""<Left>
inoremap ` ``<Left>
inoremap <F1> <Esc>
inoremap <C-Backspace> <C-w>
" }}}

" Extended text Objects (thanks to Conner McDaniel) {{{
" They slow down quite a bit actions like cc, dd, yy..
" let s:items = [ "." , "-" , "_" , "*" , ":" , "/" , "<bar>"] 
" 
" for item in s:items
"     exe "noremap yi".item." T".item."dt".item
"     exe "noremap ya".item." T".item."dt".item
"     exe "noremap ci".item." T".item."dt".item
"     exe "noremap ca".item." T".item."dt".item
"     exe "noremap di".item." T".item."dt".item
"     exe "noremap da".item." T".item."dt".item
"     exe "vnoremap vi".item." T".item."dt"item
"     exe "vnoremap va".item." T".item."dt"item
" endfor
" }}}

" Autogroups {{{
augroup nonvim
    au!
    au BufRead *.png,*.jpg,*.pdf,*.gif,*.scpt sil exe "!xdg-open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!
augroup end
" }}}
