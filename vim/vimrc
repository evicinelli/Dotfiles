" Vim-plug {{{
call plug#begin()
Plug 'tpope/vim-sensible'                            " Sensible default
Plug 'scrooloose/nerdtree',	{'on': 'NERDTreeToggle'} " Nerdtree
Plug 'chriskempson/base16-vim'                       " Colorscheme
Plug 'junegunn/goyo.vim', 	{'on': 'Goyo'}           " Goyo - distraction free writing
Plug 'airblade/vim-gitgutter'                        " Git diff aside line numbers
Plug 'mhinz/vim-startify'                            " Vim-startify
Plug 'tpope/vim-surround'                            " Surrounding motions on steroid
Plug 'sheerun/vim-polyglot'                          " A collection of language pack
Plug 'fretep/todo.txt-vim'                           " Todo.txt support
Plug 'majutsushi/tagbar',	{'on': 'Tagbar'}         " Tagbar
Plug 'mileszs/ack.vim'                               " Vim Ack
Plug 'mtth/scratch.vim'                              " Scratch buffer made easy
Plug 'godlygeek/tabular'                             " Tabularize
Plug 'junegunn/limelight.vim'                        " Focus only current paragraph
Plug 'gabrielelana/vim-markdown'                     " Complete markdown support
Plug 'lifepillar/vim-cheat40'                        " Vim cheatsheet
" Plug 'freitass/todo.txt-vim'                       " Todo.txt support
call plug#end()
"}}}

" General Settings {{{
syntax enable             " Enable syntax Highlighting
filetype plugin on        " Filetype plugin
filetype plugin indent on " Specific indentation rules depending on file type
set number relativenumber " Line numbers are relative to current line
set path^=**              " Recursive file search starting from current dir
set wildmenu              " Tab autocompletion in menu
set wildignorecase        " Ignore case when autocomplete
set ignorecase            " Mah
set autoread              " Autoreload file if modified from external command
set hlsearch              " Highlight all search results
set smartcase             " Smart-case search
set incsearch             " Incremental search
set autoindent            " Auto-indent
set smartindent           " Smart indent
set tabstop=4             " show existing tab with 4 spaces width
set shiftwidth=4          " when indenting with '>', use 4 spaces width
set expandtab             " On pressing tab, insert 4 spaces
set foldmethod=syntax     " Fold according to syntax
set linebreak             " Break long lines at spaces, not in the middle of a word
set hidden                " Allow to switch buffer without saving it
set colorcolumn=+1        " Highlight column where the 81/th char lives
set shell=/bin/bash\ -i   " Which shell to use
set spelllang=it,en       " Spell dictionaries
set splitright            " vsplit on the right
set mouse=a               " Enable mouse in terminal vim
set modeline              " Vim executes vimL commands if they are found in the current file
let mapleader = " "
let maplocalleader = " "
"}}}

" Appearance {{{
set cursorline                                                " Highlight current line
set linespace=6                                               " Line spacing
set fillchars+=vert:\|                                        " Vertical separator char
set shortmess+=I                                              " No greetings
set list listchars=tab:·\ ,trail:·,eol:¬,extends:…,precedes:… " Non printable chars
set guifont=Inconsolata\ 13
colorscheme base16-solarized-light
set bg=light
if has('gui_running')
    set guioptions-=m                                         " remove menu bar
    set guioptions-=T                                         " remove toolbar
    set guioptions-=r                                         " remove right-hand scroll bar
    set guioptions-=L                                         " remove left-hand scroll bar
    set guioptions-=b
    set guioptions-=e
else
    colorscheme base16-solarized-dark
    let base16colorspace=256
    set bg=dark
    set t_Co=256                                              " 256 color vim
endif
" }}}

" Plugin settings {{{
let NERDTreeChDirMode = 0
let g:one_allow_italics = 1
let g:goyo_height = 50
let g:goyo_width = 130
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_guifg = 'DarkGray'
let g:scratch_insert_autohide = 0
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 0
let g:startify_custom_header = [system("motivation")]
" }}}

" Statusline {{{
set statusline=%=%n\ \|\ %F\ %m%r%h%w\ \|\ %Y\ \|\ %l:%v/%L\ \|\ %p%%
" }}}

" Custom mappings and abbreviations {{{
noremap <C-l> l
noremap <C-h> h
noremap <C-j> j
noremap <C-k> k
noremap <C-n> :NERDTreeToggle<CR>
noremap <C-g> :Goyo<CR>
noremap <F1> nop
noremap Q :q!
noremap Y y$
noremap <leader>so :!xdg-open "%" <CR>
noremap <leader>a :Ack 
noremap <leader>f :find *
noremap <leader>F :find 
noremap <F8> :se spell!<CR>
noremap <F9> :se nowrap!<CR>
noremap viz [zjV]zk
noremap vaz [zV]z
noremap Z zMzv
inoremap { {}<Left>
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap " ""<Left>
inoremap ` ``<Left>
inoremap <F1> <Esc>
inoremap <C-Backspace> <C-w>
cnoremap W w
" }}}

" Extended text Objects (thanks to Conner McDaniel) {{{
" They slow down quite a bit commands like cc, dd, yy..
" let s:items = [ "." , "-" , "_" , "*" , ":" , "/" , "<bar>"] 
" 
" for item in s:items
"     exe "noremap yi".item." T".item."dt".item
"     exe "noremap ya".item." T".item."dt".item
"     exe "noremap ci".item." T".item."dt".item
"     exe "noremap ca".item." T".item."dt".item
"     exe "noremap di".item." T".item."dt".item
"     exe "noremap da".item." T".item."dt".item
"     exe "vnoremap vi".item." T".item."dt"item
"     exe "vnoremap va".item." T".item."dt"item
" endfor
" }}}

" Autogroups and Autocmds {{{
augroup text
     au BufNewFile,BufRead *.txt,*.md,*.mkd,*.markdown,*.mdwn setl ft=markdown
     au bufnewfile,bufread,bufwrite todo.txt setl ft=todo | set nospell
     au bufnewfile,bufread,bufwrite done.txt setl ft=todo | set nospell
augroup end
augroup nonvim
    au!
    au BufRead *.png,*.jpg,*.pdf,*.gif,*.scpt sil exe "!xdg-open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!
augroup end
augroup pythonFiles
    au BufNewFile,BufRead,BufWrite *.py noremap <leader>p :!python "%" &<CR>
augroup end
augroup todotxt
    au BufNewFile,BufRead,BufWrite *.todo.txt setl ft=todo | set nospell
    au BufNewFile,BufRead,BufWrite *.done.txt setl ft=todo | set nospell
augroup end
" }}}

" Functions {{{
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
" Increase/decrease font size
nnoremap <C-Up> :silent! let &guifont = substitute(
 \ &guifont,
 \ '\[0-9]+\',
 \ '\=eval(submatch(0)+1)',
 \ '')<CR>
nnoremap <C-Down> :silent! let &guifont = substitute(
 \ &guifont,
 \ ':h\zs\d\+',
 \ '\=eval(submatch(0)-1)',
 \ '')<CR>

" }}}
" vim: fdm=marker
