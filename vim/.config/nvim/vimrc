"Vim-plug {{{
call plug#begin()
if !has("nvim")
    Plug 'tpope/vim-sensible'                                        " Sensible default
endif
Plug 'christoomey/vim-tmux-navigator'                                " Now vim <3 tmux
Plug 'fretep/todo.txt-vim'                                           " Todo.txt support
Plug 'godlygeek/tabular'                                             " Tabularize
Plug 'jeffkreeftmeijer/vim-dim'                                      " Default improved: 16 color colorscheme
Plug 'junegunn/fzf',	{ 'dir': '~/.fzf', 'do': './install --all' } " Fzf <3
Plug 'junegunn/goyo.vim'
Plug 'paroxayte/autocd.vim'                                          " Autocd in folder rule-based
Plug 'sheerun/vim-polyglot'                                          " A collection of language pack
Plug 'tpope/vim-surround'                                            " Surrounding motions on steroid
Plug 'vim-pandoc/vim-pandoc'                                         " Pandoc integration
Plug 'vim-pandoc/vim-pandoc-syntax'                                  " Pandoc integration
call plug#end()
" }}}

" Options {{{
syntax enable             " Enable syntax Highighting
filetype plugin on        " Filetype plugin
filetype plugin indent on " Specific indentation rules depending on file type
set autoindent            " Auto-indent
set autoread              " Auto reload file if modified from external command
set clipboard=unnamed,unnamedplus   " Integrate with system clipboard
set colorcolumn=+1        " Highlight column where the 81/th char lives
set expandtab             " On pressing tab, insert 4 spaces
set foldmethod=syntax     " Fold according to syntax
set guicursor=a:blinkon1  " Cursor blinks every second
set hidden                " Allow to switch buffer without saving it
set hlsearch              " Highlight all search results
set ignorecase            " Mah
set incsearch             " Incremental search
set linebreak             " Break long lines at spaces, not in the middle of a word
set modeline              " Vim executes vimL commands if they are found in the current file
set mouse=a               " Enable mouse in terminal vim
set noautochdir
set number relativenumber " Line numbers are relative to current line
set path^=**              " Recursive file search starting from current dir
set shiftwidth=4          " When indenting with '>', use 4 spaces width
set showcmd               " Show partially typed commands
set smartcase             " Smart-case search
set smartindent           " Smart indent
set spell                 " Spelling on
set spelllang=it,en       " Spell dictionaries
set splitbelow            " Split below
set splitright            " Vsplit on the right
set tabstop=4             " Show existing tab with 4 spaces width
set updatetime=2000       " Consider vim inactive after x sec of no activity in normal mode
set wildignorecase        " Ignore case when autocomplete
set wildmenu              " Tab autocompletion in menu
let mapleader = " "
let maplocalleader = " "
if has("nvim")
    set inccommand=nosplit
endif
"}}}

" Appearance and statusline {{{
set list listchars=tab:·\ ,trail:·,eol:¬,extends:»,precedes:« " Non printable chars
set t_Co=16
colorscheme dim
set fillchars=vert:\ ,fold:\ 

highlight clear CursorLine
highlight ColorColumn ctermfg=9
highlight CursorLine cterm=bold
highlight FoldColumn ctermbg=0 ctermfg=8
"highlight Folded ctermbg=8 ctermfg=7
highlight PmenuSel ctermbg=4 ctermfg=0
highlight SpellBad ctermfg=9 ctermbg=none
highlight SpellCap ctermbg=14 ctermfg=0
highlight TodoDueToday ctermbg=3 ctermfg=0

set noshowmode
function! ChangeColorMode()

    let currentMode = mode()
    let bgColor = "8"
    let textColor = "15"

    if (currentMode =~# 'n' )
        let bgColor = "2"
    elseif (currentMode =~# 'i')
        let bgColor = "1"
    elseif (currentMode =~# 'v\|V\|\')
        let bgColor = "4"
    elseif (currentMode =~# 't')
        let bgColor = "3"
        let textColor = "8"
    elseif (currentMode =~# 's\|R')
        let bgColor = "6"
        let textColor = 8
    elseif (currentMode =~# 'c')
        let bgColor = "5"
    endif

    exe "hi! User1 ctermfg=".textColor." ctermbg=".bgColor." cterm=bold"
    exe "hi! User2 ctermfg=".textColor." ctermbg=".(bgColor + 8)." cterm=bold"
    redrawstatus    " Ha risolto ogni problema <3

    return ""
endfunction

""set noshowmode
set stl=%1*%{ChangeColorMode()}\ \ %{toupper(mode())}\ \ %2*\ %t\ %0*%=\ %0*%m%r%h%w\ %2*\ %Y\ %1*\ %l,%v\ (%p%%\ di\ %L)\ " \ %0*\ %{strftime('%H:%M')}\ %{system('[[\ -e\ \/tmp\/gtd\ \]\]\ &&\ cat\ \/tmp\/gtd')}
" }}}

" Plugin settings {{{
let g:netrw_banner = 0          " no banner
let g:netwr_browse_split = 4    " open in prior window
let g:netwr_altv = 1            " split to the right
let g:netrw_liststyle = 0       " tree view
let g:netwr_list_hide = netrw_gitignore#Hide()

let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#biblio#use_bibtool = 1
let g:pandoc#filetypes#handled = ["pandoc", "markdown", "textile", "extra"]
let g:pandoc#syntax#conceal#blacklist = ['titleblock', 'list', 'dashes', 'image', 'atx', 'codeblock_start', 'quotes', 'long-dashes', 'reference']
let g:pandoc#syntax#conceal#use = 1
let g:pandoc#toc#close_after_navigating = 0
let g:pandoc#toc#position ="left"

let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }

let g:autocd#autocmd_enable = 1
let g:autocd#markers = { '**/Medicina/**/*.md': ['Makefile'] }

" }}}

" Mappings {{{
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap X x
cnoremap Q q
cnoremap W w
inoremap " ""<Left>
inoremap ( ()<Left>
inoremap <C-z> <C-o><C-z>
inoremap <F1> <Esc>
inoremap [ []<Left>
inoremap ` ``<Left>
inoremap { {}<Left>
noremap <C-n> :cn<CR>
noremap <C-o> :FZF --no-exact<CR>
noremap <C-p> :cp<CR>
noremap <F1> <Esc>
noremap <F8> :se spell!<CR>
noremap <F9> :se nowrap!<CR>
noremap <leader><leader> zA <CR>
noremap <leader>a :Ack -i 
noremap <leader>b :browse oldfile<CR>
noremap <leader>f :FZF --no-exact 
noremap <leader>fh :FZF --no-exact ~<CR>
noremap <leader>fm :FZF --no-exact $MED<CR>
noremap <leader>fp :FZF --no-exact $P<CR>
noremap <leader>n :Nack 
noremap <leader>nn :set number relativenumber <CR>
noremap <leader>nnr :set nonumber norelativenumber <CR>
noremap <leader>p :FZF --no-exact<CR>
noremap <leader>so :!xdg-open "%" <CR>
noremap Y y$
noremap Z zMzv
noremap j gj
noremap k gk
noremap vaz [zV]z
noremap viz [zjV]zk
vnoremap J gj
vnoremap K gk
if has("nvim")
     tnoremap <C-\> <C-\><C-n>
endif
" }}}

" Abbreviations {{{
cabbrev f find
iabbrev perchè perché
iabbrev Perchè Perché
 " }}}

" Extended text Objects and matchpairs {{{
" Thanks to Conner McDaniel
set matchpairs+=<:>
let s:items = [ ",", "." , "-" , "_" , "*" , ":" , "/" , "<bar>", "+", "\\", "^", "~"]
for item in s:items
    exe "noremap yi".item." T".item."yt".item
    exe "noremap ya".item." F".item."yf".item
    exe "noremap ci".item." T".item."ct".item
    exe "noremap ca".item." F".item."cf".item
    exe "noremap di".item." T".item."dt".item
    exe "noremap da".item." F".item."df".item
    exe "vnoremap vi".item." T".item."vt"item
    exe "vnoremap va".item." F".item."vf"item
endfor
" }}}

 " Autogroups and Autocmds {{{
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup text
     au BufNewFile,BufRead,BufWrite *.txt,*.md,*.mkd,*.markdown,*.mdwn setl ft=pandoc
     au bufnewfile,bufread,bufwrite todo.txt setl ft=todo | set nospell
     au bufnewfile,bufread,bufwrite done.txt setl ft=todo | set nospell
augroup end

augroup nonvim
    au!
    au BufRead *.png,*.jpg,*.pdf,*.gif,*.scpt,*.doc,*.odt,*.ppt,*.odp,*.xls,*.ods,*.{mp3,mp4,mov,mkv} sil exe "!xdg-open " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
    au BufReadPost *.{docx,xlsx,pptx} sil exe "!soffice " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
augroup end

augroup pyFiles
    au BufNewFile,BufRead,BufWrite *.py noremap <leader>p :!python "%" &<CR>
augroup end

augroup todotxt
    au BufNewFile,BufRead,BufWrite *.todo.txt setl ft=todo | set nospell
    au BufNewFile,BufRead,BufWrite *.done.txt setl ft=todo | set nospell
augroup end

autocmd CursorHold * silent! update " Autosave the buffer if on hold > updatetime ms (normal mode only)
autocmd BufNew *term:\/\/* set nospell
autocmd! BufWritePost *vimrc* source %

au BufNewFile,BufRead *.md
    \ nnoremap <leader><leader> /<++><CR>cf>|
    \ inoremap ![ ![<++>](img/<++>)|
    \ inoremap ^ ^^<Left>|
    \ inoremap ~ ~~<Left>|
" }}}

" Functions {{{
function! s:goyo_enter()
    vertical resize
endfunction

function! s:goyo_leave()
     silent! source ~/.config/nvim/init.vim
     " normal <CR>
endfunction

function! FileViewer()
    set nosplitright
    vsplit .
    normal 30< 
    set splitright
endfunction

function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

" }}}

" Notes {{{
command! -nargs=1 Nack vimgrep "<args>" $MED/**/*.md
nnoremap <leader>n :Nack 

function! s:TakeNotes()
    Goyo 100%
    " vertical resize
    silent! TOC
    se nowrap
    "normal l
endfunction
com! Notes call s:TakeNotes()

" }}}

" vim: fdm=marker
