"Vim-plug {{{
call plug#begin()
if !has("nvim")
    Plug 'tpope/vim-sensible'                                            " Sensible default
endif
Plug 'junegunn/fzf',	{ 'dir': '~/.fzf', 'do': './install --all' } " Fzf <3
Plug 'junegunn/goyo.vim', 	{'on': 'Goyo'}                           " Goyo - distraction free writing
Plug 'airblade/vim-gitgutter'                                        " Git diff aside line numbers
Plug 'mhinz/vim-startify'                                            " Vim-startify
Plug 'tpope/vim-surround'                                            " Surrounding motions on steroid
Plug 'tpope/vim-fugitive'
Plug 'sheerun/vim-polyglot'                                          " A collection of language pack
Plug 'fretep/todo.txt-vim'                                           " Todo.txt support
Plug 'mileszs/ack.vim'                                               " Ack in vim
Plug 'godlygeek/tabular'                                             " Tabularize
Plug 'junegunn/limelight.vim'                                        " Focus only current paragraph
Plug 'vim-pandoc/vim-pandoc'                                         " Pandoc integration
Plug 'vim-pandoc/vim-pandoc-syntax'                                  " Pandoc integration
Plug 'lifepillar/vim-solarized8'
Plug 'lilydjwg/colorizer'                                            " Hilight color definition
Plug 'chriskempson/base16-vim'
call plug#end()
"}}}

" Options {{{
syntax enable             " Enable syntax Highighting
filetype plugin on        " Filetype plugin
filetype plugin indent on " Specific indentation rules depending on file type
set number relativenumber " Line numbers are relative to current line
set path^=**              " Recursive file search starting from current dir
set wildmenu              " Tab autocompletion in menu
set wildignorecase        " Ignore case when autocomplete
set ignorecase            " Mah
set autoread              " Autoreload file if modified from external command
set hlsearch              " Highlight all search results
set smartcase             " Smart-case search
set incsearch             " Incremental search
set autoindent            " Auto-indent
set smartindent           " Smart indent
set tabstop=4             " Show existing tab with 4 spaces width
set shiftwidth=4          " When indenting with '>', use 4 spaces width
set expandtab             " On pressing tab, insert 4 spaces
set foldmethod=syntax     " Fold according to syntax
set linebreak             " Break long lines at spaces, not in the middle of a word
set hidden                " Allow to switch buffer without saving it
set colorcolumn=+1        " Highlight column where the 81/th char lives
set spelllang=it,en       " Spell dictionaries
"set splitright            " Vsplit on the right
set splitbelow            " Split below
set mouse=a               " Enable mouse in terminal vim
set modeline              " Vim executes vimL commands if they are found in the current file
set updatetime=2000       " Consider vim inactive after 4 sec of no activity in normal mode
let mapleader = " "
let maplocalleader = " "
if has("nvim")
    set inccommand=nosplit
endif
"}}}

" Statusline {{{
set statusline=%t%=\ %m%r%h%w\ \/\ %Y\ \/\ %l,%v\ (%p%%\ di\ %L)\ \/\ %{strftime('%H:%M')}\ %{system('[[\ -e\ \/tmp\/gtd\ \]\]\ &&\ cat\ \/tmp\/gtd')}

" set showtabline=2
" let g:airline_symbols_ascii = 1
" let g:airline_section_z=' %l/%L:%v (%p%%)'
" set noshowmode
" }}}

" Appearance {{{
set list listchars=tab:·\ ,trail:·,eol:¬,extends:→,precedes:← " Non printable chars
if has('gui_running')
    let g:fzf_launcher = 'urxvt -geometry 120x30 -e bash -c %s' " Launcher for fzf
    set guioptions-=m                                         " remove menu bar
    set guioptions-=T                                         " remove toolbar
    set guioptions-=r                                         " remove right-hand scroll bar
    set guioptions-=L                                         " remove left-hand scroll bar
    set guioptions-=b
    set guioptions-=e
    set guifont=Input\ Mono\ Light\ 12
    set linespace=6                                               " Line spacing
endif
set t_Co=256
set bg=light
colorscheme base16-grayscale-light
set shortmess+=I                                              " No greetings
set fillchars=vert:\|,fold:-
set nocursorline
" }}}

" Plugin settings {{{
let g:netrw_banner = 0          " no banner
let g:netwr_browse_split = 4    " open in prior window
let g:netwr_altv = 1            " split to the right
let g:netrw_liststyle = 0       " tree view
let g:netwr_list_hide = netrw_gitignore#Hide()

let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_guifg = 'DarkGray'

let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 0
let g:startify_custom_header = [""]

let g:pandoc#filetypes#handled = ["pandoc", "markdown", "textile"]
let g:pandoc#biblio#use_bibtool = 1
let g:pandoc#syntax#conceal#use = 0
" let g:pandoc#syntax#conceal#blacklist = ['titleblock', 'list', 'dashes', 'image', 'atx', 'codeblock_start', 'quotes']
let g:pandoc#toc#close_after_navigating = 0

let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }
" }}}

" Mappings {{{
inoremap " ""<Left>
inoremap ( ()<Left>
inoremap <C-c> <C-o>:noh<CR>
inoremap <C-p> <Esc>:FZF<CR>
inoremap <C-z> <C-o><C-z>
inoremap <F1> <Esc>
inoremap [ []<Left>
inoremap ` ``<Left>
inoremap { {}<Left>
noremap <F1> <Esc>
noremap <leader>nn :set number relativenumber <CR>
noremap <leader>nnr :set nonumber norelativenumber <CR>
noremap :Q :q
noremap :W :w
noremap / mc/
noremap <C-g> :Goyo<CR>
noremap <C-h> h
noremap <C-j> j
noremap <C-k> k
noremap <C-l> l
noremap <C-c> :noh<CR>
noremap <C-n> :cn<CR>
noremap <C-p> :FZF --no-exact<CR>
noremap <F8> :se spell!<CR>
noremap <F9> :se nowrap!<CR>
noremap <leader><leader> zA <CR>
noremap <leader>a :Ack -i 
noremap <leader>f :FZF --no-exact 
noremap <leader>fd :FZF --no-exact $DBX<CR>
noremap <leader>fh :FZF --no-exact ~<CR>
noremap <leader>fm :FZF --no-exact $MED<CR>
noremap <leader>fo :FZF --no-exact $OC<CR>
noremap <leader>p :FZF --no-exact<CR>
noremap <leader>so :!xdg-open "%" <CR>
noremap Y y$
noremap Z zMzv
noremap vaz [zV]z
noremap viz [zjV]zk
vnoremap J j
vnoremap K k
if has("nvim")
    " tnoremap
endif
" }}}

" Abbreviations {{{
cabbrev f find
iabbrev perchè perché
" }}}
" Extended text Objects (Conner McDaniel) and matchpairs {{{
let s:items = [ ",", "." , "-" , "_" , "*" , ":" , "/" , "<bar>", "+", "\\"]
for item in s:items
    exe "noremap yi".item." T".item."yt".item
    exe "noremap ya".item." F".item."yf".item
    exe "noremap ci".item." T".item."ct".item
    exe "noremap ca".item." F".item."cf".item
    exe "noremap di".item." T".item."dt".item
    exe "noremap da".item." F".item."df".item
    exe "vnoremap vi".item." T".item."vt"item
    exe "vnoremap va".item." F".item."vf"item
endfor

set matchpairs+=<:>
" }}}
"
 " Autogroups and Autocmds {{{
augroup text
     au BufNewFile,BufRead,BufWrite *.txt,*.md,*.mkd,*.markdown,*.mdwn setl ft=pandoc
     au bufnewfile,bufread,bufwrite todo.txt setl ft=todo | set nospell
     au bufnewfile,bufread,bufwrite done.txt setl ft=todo | set nospell
augroup end

augroup nonvim
    au!
    au BufRead *.png,*.jpg,*.pdf,*.gif,*.scpt,*.doc,*.odt,*.ppt,*.odp,*.xls,*.ods,*.{mp3,mp4,mov,mkv} sil exe "!xdg-open " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
    au BufReadPost *.{docx,xlsx,pptx} sil exe "!libreoffice " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
augroup end

augroup pyFiles
    au BufNewFile,BufRead,BufWrite *.py noremap <leader>p :!python "%" &<CR>
augroup end

augroup todotxt
    au BufNewFile,BufRead,BufWrite *.todo.txt setl ft=todo | set nospell
    au BufNewFile,BufRead,BufWrite *.done.txt setl ft=todo | set nospell
augroup end

autocmd CursorHold * silent! update " Autosave the buffer if on hold > updatetime ms (normal mode only)

autocmd! BufWritePost *vimrc* source %

au BufNewFile,BufRead *.md
    \ inoremap <C-j> ![<++>](img/<++>)|
    \ inoremap ~ ~~<Left>|
    \ inoremap ^ ^^<Left>|
    \ nnoremap <leader><leader> /<++><CR>cf>|
    \ normal zR

" }}}

" Functions {{{
function! FileViewer()
    set nosplitright
    vsplit .
    normal 30< 
    set splitright
endfunction

function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction
" }}}

" Notes {{{
command! -nargs=1 Nack vimgrep "<args>" $MED/**/*.md
nnoremap <leader>n :Nack 

" Take notes the good way
" https://hundredrabbits.itch.io/left
function! s:TN()
    Goyo
    vertical resize 400
    TOC
    set nowrap
    normal h
endfunction
command! TN call s:TN()

function! s:goyo_enter()
	vertical resize
    GitGutterBufferDisable
endfunction

function! s:goyo_leave()
    GitGutterBufferEnable
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" }}}

"vim: fdm=marker
