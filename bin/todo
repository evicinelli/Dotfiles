#! /usr/bin/env bash

# A very simple yet super effective (at least, for me) cli todo manager
# Depends on: date, standard bash utilities, todo.txt format

TD="$HOME/pCloudDrive/Documenti/Todo/todo.txt"
DN="$HOME/pCloudDrive/Documenti/Todo/done.txt"

todo-edit() {
[[ $# -gt 0 ]] && \
    $EDITOR $TD +/$(echo ${*} | sed "s/ /.*/") || $EDITOR $TD
}

todo-add(){
# $ todo-add "(A) task +project @context due:<date in words>"
priority_or_done_pattern="^(\([A-Z]\))|^x "
if [[ $# -gt 0 ]]; then
    pri=""
    arg=$(echo $* | grep -o "due:.*$" | sed "s/due://")
    d=$(date +%F -d "$arg")
    date_exit_status=$?
    preTask=$(echo "$*" | sed "s/due:.*$/due:$d/") # Date in correct format
    pri=$(echo "$*" | egrep -o "$priority_or_done_pattern") # Get priority or done state
    task=$(echo "$preTask" | sed -E "s/$priority_or_done_pattern//") # remove everything that matched
    if [[ $# -gt 0 ]]; then
        if [[ $date_exit_status -eq 0 ]]; then
            echo "$pri $(date -I) $task" | sed "s/^ //" >> $TD
        fi
    fi
else
    echo "todo-add (A) task +project @context due:<date in \`date -d\` compatible format>"
fi
}

todo-ls() {
    if [[ $# -gt 0 ]]; then
        if date -d "$*" > /dev/null 2>&1; then
            cat $TD | grep -v "^x .*" | grep -Gi "due:$(date +%F --date="$*")"
        else
            args="$(echo $* | sed -e "s/\ /.*/g")" # space -> .*
            cat $TD | grep -v "^x" | grep -Gi "$args" $TD
        fi
    else
        cat $TD  | grep -v "^x .*" | grep "due:$(date +%F --date="today")"
    fi
}

todo-done () {
if [[ $# -gt 0 ]]; then
    QUERY=$(echo $* | sed -e "s/\ /.*/g") # Insensitive match with space repleaced with .*
    ENTRIES_NO=$(sed -n "/$QUERY/p" $TD | grep -v "^x .*" | wc -l)
    ENTRY=$(sed -n "/$QUERY/p" $TD | grep -v "^x .*")
    if [[ $ENTRIES_NO -eq 1 ]]; then
        # Marchiamo quell'entry come completata in todo.txt
        echo -e "Marco come completato: "$ENTRY
        sed -in "s/${ENTRY}/x $(date +%F)\ &/" $TD
    else
        # Trovare un modo pi√π carino per fare pure questo
        if [[ $ENTRIES_NO -gt 1 ]]; then
            sed -in "s/$( sed -n "/$QUERY/p" $TD | grep -v "^x .*" | fzf)/x $(date +%F)\ &/" $TD
        else
            echo -e "Nada de nada, mi sa che hai scritto male"
        fi
    fi
else
    sed -in "s/$(cat $TD | fzf)/x $(date +%F)\ &/" $TD
fi
}

function todo-agenda(){
end=${1:-6} # if not $2, by default print todos for next 6 days
if [[ $end -ge 0 ]]; then
    for (( i=0; i<$end; i++ )) do
        t=$(todo-ls $i days);
        [[ ! -z "$t" ]] && (echo -ne "\n- $(date +%a\ %x -d "$i days") --- \n"; echo "$t";);
    done;
else
    for (( i=$end; i<0; i++ )) do
        t=$(todo-ls $i days);
        [[ ! -z "$t" ]] && (echo -ne "\n- $(date +%a\ %x -d "$i days") ($i days ago) --- \n"; echo "$t";);
    done;
fi
echo
}

function todo-past(){
local IFS=""
end=${1:-100} # if not $2, by default print todos for the past 100 days
for (( i=$end; i>0; i-- )) do
    t=$(todo-ls -$i days);
    [[ ! -z "$t" ]] && echo $t;
done;
}

function todo-someday(){
    cat $TD | grep -v "due:.*$"
}

function todo-ls-proj(){
    # local IFS=""
    readarray tags < <(grep -o "@.[a-z]*" $TD | sort | uniq)
    for tag in ${tags[*]}; do
        echo -ne "\n- $tag --- \n"
        cat $TD | grep -v "^x" | grep "$tag"
    done
}

function todo-ls-tags(){
    readarray tags < <(grep -o "\+.\w*" $TD | sort | uniq)
    for tag in ${tags[*]}; do
        echo -ne "\n- $tag --- \n"
        cat $TD | grep -v "^x" | grep "$tag"
    done
}

usage (){
cat <<EOH
## TODO
## list tag e progetti per bene
## Someday command
## Usage command
## Someday command
## Usage command
EOH
}

# Main

case $1 in
    "edit"|"e") shift; todo-edit $*;;
    "add"|"a") shift; todo-add $*;;
    "ls"|"l") shift; todo-ls $*;;
    "done"|"d") shift; todo-done $*;;
    "tags"|"t") shift; todo-ls-tags $*;;
    "proj"|"j") shift; todo-ls-proj $*;;
    "agenda"|"g") shift; todo-agenda $*;;
    "past"|"p") shift; todo-past $*;;
    "someday"|"s") shift; todo-someday $*;;
    "u") usage ;;
    *) todo-ls $* ;;
esac
