#! /usr/bin/env bash
# vim: fdm=indent

# A very simple yet super effective (at least, for me) cli todo.txt manager
# Depends on: a text editor, standard gnu utilities, fzf

# Configuration
TD=${TD:-"$HOME/todo.txt"}
DN=${DN:-"$HOME/done.txt"}
EDITOR=${EDITOR:-vim}
URGENT_RANGE="A-A"

todo-edit() {
	if tty -s; then
		[[ $# -gt 0 ]] && $EDITOR "$TD" +/$(echo ${*} | sed "s/ /.*/") || $EDITOR "$TD"
	else
		echo "No terminal connected to stdout"
	fi
}

todo-add(){
	priority_or_done_pattern="^(\([A-Z]\))|^x "
	pri=""
	arg=$(echo $* | grep -o "due:.*$" | sed "s/due://")
	d=$(date +%F -d "$arg")
	date_exit_status=$?
	preTask=$(echo "$*" | sed "s/due:.*$/due:$d/") # Date in correct format
	pri=$(echo "$*" | egrep -o "$priority_or_done_pattern") # Get priority or done state
	task=$(echo "$preTask" | sed -E "s/$priority_or_done_pattern//") # remove everything that matched
	if [[ $# -gt 0 ]]; then
		if [[ $date_exit_status -eq 0 ]]; then
			toAdd="$pri $(date -I) $task"
			echo "Aggiungo: $toAdd"
			echo $toAdd | sed "s/^ //" >> "$TD"
		fi
	fi
}

todo-ls() {
	if [[ $# -gt 0 ]]; then
		if date -d "$*" > /dev/null 2>&1; then
			cat "$TD" | grep -v "^x .*" | grep -Gi "due:$(date +%F --date="$*")"
		else
			args="$(echo $* | sed -e "s/\ /.*/g")" # space -> .*
			cat "$TD" | grep -v "^x" | grep -Gi "$args" "$TD"
		fi
	else
		cat "$TD"  | grep -v "^x .*" | grep "due:$(date +%F --date="today")"
	fi | sort -n
}

todo-done () {
	if [[ $# -gt 0 ]]; then
		QUERY=$(echo $* | sed -e "s/\ /.*/g")
		ENTRY=$(grep -i "$QUERY" "$TD" | grep -v "^x .*")
		ENTRIES_NO=$(echo -e "$ENTRY" | grep -v "^$"| wc -l)
		[[ $ENTRIES_NO -gt 0 ]] || (echo "Nada de nada, mi sa che hai scritto male" && exit)
		[[ $ENTRIES_NO -gt 1 ]] && ENTRY=$(echo -e "$ENTRY" | fzf)

		sed -i "s|$ENTRY|x $(date +%F) &|" "$TD"
		echo -e "Marco come completato: $ENTRY"
	else
		# ENTRY=$(cat "$TD" | fzf)
		todo-ls "^x $(date -I)"
	fi
}

function todo-agenda(){
	end=${1:-6} # if not $1, by default print todos for next 6 days
	[[ $end -gt 0 ]] && days=$(seq 0 $end) || days=$(seq $end 0)
	for i in $days; do
		t=$(todo-ls $i days)
		day_title="- $(date +%a\ %d\/%m\/%Y -d "$i days") ($i days) [$(echo -e "$t" | wc -l)] --\n"
		if $(tty -s) && [[ -z $TODO_DUMMY ]]; then
			[[ ! -z "$t" ]] && echo -e "\033[1;31m${day_title}\033[0m${t}\n"
		else # Dummy terminal
			[[ ! -z "$t" ]] && echo -e "${day_title}${t}\n"
		fi
	done;
	echo
}

function todo-past(){
	for i in $(seq ${1:--100} 0); do
		t=$(todo-ls "${i}days")
		[[ ! -z "$t" ]] && echo "$t"
	done
}

function todo-someday(){
	cat "$TD" | grep -v "due:.*$"
}

function todo-ls-proj(){
	tags=($(grep -Eo " @\w+" "$TD" | sort | uniq))
	for tag in ${tags[*]}; do
		t=$(grep -v "^x" "$TD" | grep "$tag")
		echo -ne "\n- $tag --- [$(echo "$t" | wc -l)]\n"
		echo -e "$t"
	done
}

function todo-ls-tags(){
	tags=($(grep -Eo " \+\w+" "$TD" | grep -Ev "^ \+ $" | sort | uniq))
	for tag in ${tags[*]}; do
		t=$(grep -v "^x" "$TD" | grep "$tag")
		echo -ne "\n- $tag --- [$(echo "$t" | wc -l)]\n"
		echo -e "$t"
	done
}

todo-urgent (){
	todo-ls $* | grep -e "^([$URGENT_RANGE])"
}

usage (){
cat <<-HELP
	USAGE

		todo <command> [argument]

	COMMANDS

		a	add     	 add [argument] as a new task. If a due date is set, it must be specified in a gnu \`date\` compatible format
		d	done    	 mark task matching [argument] as done
		e	edit    	 edit $TD with $EDITOR
		g	agenda  	 list tasks for the next Â±[argument] days (default: 6)
		l	ls      	 list today's tasks or list task matching [argument], if supplied
		p	past    	 list overdue tasks
		s	someday 	 list tasks which do not have a due date
		u	urgent  	 list highly prioritized todos ($URGENT_RANGE) matching [argument], if supplied
		+	tags    	 list tasks grouped by +tags
		@	proj    	 list tasks grouped by @project

	CONFIGURATION

		Todo file: $TD
		Done file: $DN
		Editor:    $EDITOR

	HELP
}

# Main
case $1 in
	"add"|"a") shift; todo-add $*;;
	"agenda"|"g") shift; todo-agenda $*;;
	"done"|"d") shift; todo-done $*;;
	"edit"|"e") shift; todo-edit $*;;
	"ls"|"l") shift; todo-ls $*;;
	"past"|"p") shift; todo-past $*;;
	"proj"|"j"|"@") shift; todo-ls-proj $*;;
	"someday"|"s") shift; todo-someday $*;;
	"tags"|"t"|"+") shift; todo-ls-tags $*;;
	"urgent"|"u") shift; todo-urgent $*;;
	"h"|"help"|"-h"|"--help") usage ;;
	*) todo-ls $* ;;
esac
