"Vim-plug {{{
call plug#begin()
if !has("nvim")
    Plug 'tpope/vim-sensible'                                        " Sensible default
endif
"Plug 'christoomey/vim-tmux-navigator'                                " Now vim <3 tmux
Plug 'fretep/todo.txt-vim'                                           " Todo.txt support
Plug 'godlygeek/tabular'                                             " Tabularize
Plug 'junegunn/fzf',	{ 'dir': '~/.fzf', 'do': './install --all' } " Fzf <3
Plug 'junegunn/goyo.vim'                                             " Distraction free writing
Plug 'paroxayte/autocd.vim'                                          " Autocd in folder rule-based
Plug 'sheerun/vim-polyglot'                                          " A collection of language pack
Plug 'tpope/vim-surround'                                            " Surrounding motions on steroid
Plug 'vim-pandoc/vim-pandoc'                                         " Pandoc integration
Plug 'vim-pandoc/vim-pandoc-syntax'                                  " Pandoc integration
Plug 'chrisbra/csv.vim'                                              " Csv file made right
Plug 'rickhowe/diffchar.vim'                                         " Better highighting in diff mode
Plug 'mbbill/undotree'
Plug 'reedes/vim-colors-pencil'

call plug#end()
" }}}

" Options {{{
syntax enable             " Enable syntax Highighting
filetype plugin on        " Filetype plugin
filetype plugin indent on " Specific indentation rules depending on file type
set secure                " No shell command on autocmd
set clipboard=unnamed,unnamedplus   " Integrate with system clipboard
set autoindent            " Auto-indent
set autoread              " Auto reload file if modified from external command
set backupdir=/tmp//      " Backup file in /tmp//
set colorcolumn=+1        " Highlight column where the 81/th char lives
set cursorline            " Highlight the line in which the cursor is
set directory=~/.local/share/nvim/swap// " Swap file in ~/.config/nvim/swap//
set expandtab             " On pressing tab, insert 4 spaces
set foldmethod=syntax     " Fold according to syntax
"set guicursor=a:blinkon1  " Cursor blinks every second
set hidden                " Allow to switch buffer without saving it
set hlsearch              " Highlight all search results
set ignorecase            " Mah
set incsearch             " Incremental search
" set laststatus=1          " Statusbar only if > 2 windows
set lazyredraw            " Redraw screen only when necessary
set linebreak             " Break long lines at spaces, not in the middle of a word
set modeline              " Vim executes vimL commands if they are found in the current file
set mouse=                " Disable mouse in terminal vim, :set mouse=a to enable
set noautochdir           " Do not change folder
set number relativenumber " Line numbers are relative to current line
set path^=**              " Recursive file search starting from current dir
set shiftwidth=4          " When indenting with '>', use 4 spaces width
set showcmd               " Show partially typed commands
set showmode
set smartcase             " Smart-case search
set smartindent           " Smart indent
set spell                 " Spelling on
set spelllang=it,en       " Spell dictionaries
set splitbelow            " Split below
set splitright            " Vsplit on the right
set tabstop=4             " Show existing tab with 4 spaces width
set undodir=~/.vimundo    " Persistent undo kept under ~/.vimundo/
set undofile              " Persistent history
set undolevels=5000       " How many edit are saved in undofile
set updatetime=2000       " Consider vim inactive after x sec of no activity in normal mode
set wildignorecase        " Ignore case when autocomplete
set wildmenu              " Tab autocompletion in menu
let mapleader = " "
let maplocalleader = " "
if has("nvim")
    set inccommand=nosplit
endif
"}}}

" Plugin settings {{{
let g:netrw_banner = 0          " no banner
let g:netrw_liststyle = 0       " tree view
let g:netwr_altv = 1            " split to the right
let g:netwr_browse_split = 4    " open in prior window
let g:netwr_list_hide = netrw_gitignore#Hide()

let g:pandoc#biblio#use_bibtool = 1
let g:pandoc#filetypes#handled = ["pandoc", "markdown", "textile", "extra"]
let g:pandoc#folding#mode = "relative"
let g:pandoc#syntax#conceal#blacklist = ['titleblock', 'image', 'subscript', 'superscript', 'strikeout', 'atx', 'codeblock_start', 'codeblock_delim', 'footnote', 'definition', 'list', 'newline', 'quotes', 'inlinecode', 'ellipses']
let g:pandoc#syntax#conceal#use = 0
let g:pandoc#toc#close_after_navigating = 0
let g:pandoc#toc#position = "left"

let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }

let g:autocd#autocmd_enable = 1
let g:autocd#markers = { '**/Medicina/**/*.txt': ['Makefile'] }

let g:goyo_width = "90%"

let g:csv_highlight_column = 'y'
" }}}

" Mappings {{{
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
inoremap <C-z> <C-o><C-z>
noremap <C-l> :noh <CR>
noremap <C-n> :cn<CR>
noremap <C-p> :cp<CR>
noremap <leader>1 :set laststatus=1 \| set showmode <CR>
noremap <leader>2 :set laststatus=2 \| set noshowmode <CR>
noremap <leader><leader> zA <CR>
noremap <leader>a :Ack -i 
noremap <leader>b :Buffers<CR>
noremap <leader>f :FZF --no-exact 
noremap <leader>m :MRU <CR>
noremap <leader>na :Nack 
noremap <leader>p :FZF<CR>
noremap <leader>so :!xdg-open "%" <CR>
noremap <F1> <Esc>
noremap <F8> :se spell!<CR>
noremap <F9> :se nowrap!<CR>
inoremap [ []<Left>
inoremap ` ``<Left>
inoremap { {}<Left>
cnoremap Q q
cnoremap W w
cnoremap X x
inoremap " ""<Left>
inoremap ( ()<Left>
noremap Y y$
noremap Z zMzv
noremap j gj
noremap k gk
vnoremap J gj
vnoremap K gk
vnoremap az [zo]z
vnoremap iz [zjo]zk
if has("nvim")
     tnoremap <C-\> <C-\><C-n>
endif
" }}}

" Abbreviations and digraphs {{{
cabbrev f find
iabbrev perchè perché
iabbrev Perchè Perché
iabbrev sg sg.
iabbrev pz pz.
iabbrev tp tp.
dig lt 0060
dig gt 0062
dig ra 8594
dig Ra 8658
 " }}}

" Extended text Objects and matchpairs {{{
" Thanks to Conner McDaniel
set matchpairs+=<:>
let s:items = [ ",", "." , "-" , "_" , "*" , ":" , "/" , "<bar>", "+", "\\", "^", "~"]
for item in s:items
    exe "noremap yi".item." T".item."yt".item
    exe "noremap ya".item." F".item."yf".item
    exe "noremap ci".item." T".item."ct".item
    exe "noremap ca".item." F".item."cf".item
    exe "noremap di".item." T".item."dt".item
    exe "noremap da".item." F".item."df".item
    exe "vnoremap vi".item." T".item."vt"item
    exe "vnoremap va".item." F".item."vf"item
endfor
" }}}

 " Autogroups and Autocmds {{{
autocmd CursorHold * silent! update " Autosave the buffer if on hold > updatetime ms (normal mode only)
autocmd BufNew *term:\/\/* set nospell
autocmd! BufWritePost *vimrc* source %
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

autocmd  FileType fzf set laststatus=0 noshowmode noruler nonumber norelativenumber
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler number relativenumber

augroup text
     au BufNewFile,BufRead,BufWrite *.txt,*.md,*.mkd,*.markdown,*.mdwn setl ft=pandoc | inoremap ![ ![](img/)<Left>
     au bufnewfile,bufread,bufwrite todo.txt setl ft=todo | set nospell | se nowrap
     au bufnewfile,bufread,bufwrite done.txt setl ft=todo | set nospell | se nowrap
augroup end

augroup nonvim
    au!
    au BufRead *.png,*.jpg,*.pdf,*.gif,*.scpt,*.doc,*.odt,*.ppt,*.odp,*.xls,*.ods,*.{mp3,mp4,mov,mkv} sil exe "!xdg-open " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
    au BufReadPost *.{docx,xlsx,pptx} sil exe "!soffice " . shellescape(expand("%:p")) . " &" | bd | let &ft=&ft | redraw!
augroup end

augroup pyFiles
    au BufNewFile,BufRead,BufWrite *.py noremap <leader>p :!python "%" &<CR>
augroup end

augroup todotxt
    au BufNewFile,BufRead,BufWrite *.todo.txt setl ft=todo | set nospell
    au BufNewFile,BufRead,BufWrite *.done.txt setl ft=todo | set nospell
augroup end
" }}}

" Functions {{{

" Goyo
function! s:goyo_enter()
    " vertical resize
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
    set scrolloff=999
    if &bg == "light"
        hi NonText ctermfg=15 ctermbg=NONE
    endif
    hi Whitespace ctermfg=NONE ctermbg=NONE
    hi EndOfBuffer ctermfg=NONE ctermfg=NONE

endfunction

function! s:goyo_leave()
     silent! source ~/.config/nvim/init.vim
     set scrolloff=0
     let &bg=&bg
endfunction

" Diff from current buffer against saved file
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

command! -nargs=? Files FZF --query=<args>\ 

" Now :ls <3 fzf
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

command! -nargs=* Buffers call fzf#run(fzf#wrap({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '--no-exact +m --query="<f-args>"',
\   'down':    len(<sid>buflist()) + 4
\ }))


" fzf search :oldfiles
command! -bang MRU call fzf#run(fzf#wrap({
\   "source": v:oldfiles,
\}, <bang>0))
" }}}

" Notes {{{
command! -nargs=1 Nack vimgrep "<args>" $MED/**/*.txt
nnoremap <leader>n :Nack 
" }}}

" Appearance and statusline {{{
set list listchars=tab:·\ ,trail:·,eol:¬,extends:»,precedes:« " Non printable chars
set fillchars=vert:\ ,fold:\ 
let &bg=$BG  " Light|dark, see .bashrc

set notermguicolors
colorscheme dimim

set stl=\ %{GetMode()}\ \|\ %t\ %=\ %m%r%h%w\ \|\ %Y\ \|\ %l,%v\ (%p%%\ di\ %L)\ \|\ %{strftime('%H:%M')}\ 

function! GetMode()
    return toupper(mode())
endfunction

" }}}

" vim: fdm=marker
