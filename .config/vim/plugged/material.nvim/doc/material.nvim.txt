================================================================================
                                                                 *material.nvim*
              __          _      __           _      ~
  __ _  ___ _/ /____ ____(_)__ _/ / ___ _  __(_)_ _  ~
 /  ' \/ _ `/ __/ -_) __/ / _ `/ / / _ \ |/ / /  ' \ ~
/_/_/_/\_,_/\__/\__/_/ /_/\_,_/_(_)_//_/___/_/_/_/_/ ~
                                                                                                                    

Material.nvim is a colorscheme for NeoVim written in Lua with built in support
for native LSP, TreeSitter and many more plugins.

================================================================================
CONTENTS

    1. Features ................. |material.nvim-features|
    2. Usage .................... |material.nvim-usage|
    3. Styles ................... |material.nvim-styles|
    4. Configuration ............ |material.nvim-configuration|
    5. Functions ................ |material.nvim-functions|
    6. Mappings ................. |material.nvim-mappings|

================================================================================
1. Features                                             *material.nvim-features*

    + There are 5 styles to choose from: -oceanic
                                         -deep ocean
                                         -palenight
                                         -darker
                                         -lighter

    + A wide array of supported plugins like: -TreeSitter
                                              -LSP Diagnostics
                                              -LSP Saga
                                              -LSP Trouble
                                              -Nvim-Compe
                                              -Git Gutter
                                              -Git Messenger
                                              -Git Signs
                                              -Telescope.nvim
                                              -Nvim-Tree.lua
                                              -NERDTree
                                              -Indent-Blankline.nvim
                                              -Vim-Which-Key
                                              -WhichKey.nvim
                                              -Dashboard
                                              -BufferLine
                                              -Lualine
                                              -Neogit
                                              -Vim-Sneak
                                              -Nvim-Dap
                                              -Vim-Illuminate

    + Ability to have a different background on sidebar windows like Nvim-Tree,
      Terminal, Packer, Whichkey, QuickFix etc.

    + Asynchronous highlight loading which makes the theme extremely fast

    + Added functions for live style switching, without the need to reload
      NeoVim

================================================================================
2. Usage                                                   *material.nvim-usage*

    To use the default settings, just apply the theme

    If you are using Vim-Script:
        colorscheme material~

    If you are using Lua:
        vim.cmd 'colorscheme material'~


    Material.nvim also includes two Lualine themes called
	'material-nvim' and 'material-stealth'.
	Set one of them in your Lualine config
        require('lualine').setup {~
          options = {~
            -- ... your lualine config
			theme = 'material-nvim'~
			or
			theme = 'material-stealth'~
            -- ... your lualine config
          }~
        }~
    Just make sure to set the theme to "material.nvim" or "material-stealth",
	as "material" already exist built in to lualine

================================================================================
3. Styles                                                 *material.nvim-styles*

    The theme comes in 5 styles to choose from

    + Oceanic:~
        This is the default style that will be applied by default.
        It uses a soft and darkish blue background, and a teal accent
        color.

    + Deep Ocean:~
        This style comes with a really dark background and a cyan accent
        color.

    + Palenight:~
        This style is based on the Palenight color theme, but with the
        material color palette applied to it. It has a blueish gray background
        and a purple accent color.

    + Darker:~
        This style is loosely based on the Gruvbox color theme. It has a brown
        background and orange accent color.

    + Lighter:~
        This is the only light style in this colorscheme. It comes with a
        white background and a light blue accent color. It is a bit low on
        contrast, but there is an option to increase the contrast of this
        style for those that want more visibilty.

    The styles are set by setting the global variable 'material_style' to the
    desired style name
    
    For example:

        Vim-Script:
            let g:material_style = "palenight"~
        Lua:
            vim.g.material_style = "deep ocean"~

    Just make sure to set the style before applying the colorscheme

================================================================================
4. Configuration                                   *material.nvim-configuration*

What sets material.nvim apart from most Vim/NeoVim themes is the wide array
of options for customising the theme.

In order for these settings to take effect, they should be placed in your
init.vim/init.lua before applying the colorscheme

Options:

The theme style is set using a global variable called material_style

    + g:material_style {string} (default = "oceanic")
        This sets the style of the the theme, and can be initialized with one
        of these five values: -oceanic
                              -deep ocean
                              -palenight
                              -lighter
                              -darker

All other options are passed to a setup function

	+ require('material').setup()

This is an example of the setup function with the default values:

	require('material').setup({
		contrast = {
			sidebars = false,
			floating_windows = false,
			line_numbers = false,
			sign_column = false,
			cursor_line = false,
			non_current_windows = false,
			popup_menu = false
		},
		italics = {
			comments = false,
			strings = false,
			keywords = false,
			functions = false,
			variables = false
		},
		contrast_filetypes = {},
		high_visibility = {
			lighter = false,
			darker = false
		},
		disable = {
			borders = false,
			background = false,
			term_colors = false,
			eob_lines = false
		}
		custom_highlights = {}
	})

    + contrast {table}
          Make sidebars (like nvim-tree), floating windows, line numbers,
		  sign column, popup menu, cursor line and non current windows have
		  a different background. Varable names are: - sidebars
													 - floating_windows
							 						 - line_numbers
							 						 - sign_column
							 						 - cursor_line
							 						 - non_current_windows
							 						 - popup_menu
		These can be set to true or false

	+ italics  {table}
		  Select which code objects are italic: -comments
		                                        -strings
		                                        -keywords
		                                        -functions
		                                        -variables
		 Set the desired value to true to make it italic

	+ contrast_filetypes  {table}
		  Pass in filetype names of windows to make their background darker (contrasted)
		  example: "terminal", "qf", "packer" ...

	+ high_visibility  {table}
		  Set the darker or lighter variable to true in this table to give
		  those styles more contrast for better visibility

	+ disable  {table}
		  This table allows you to disable the theme from setting
		  borders, background, terminal colors and end-of-buffer lines
	
	+ custom_highlights  {table}
		  If you want to change or set a certain highlight group to a value,
		  you can pass the group name and the color values in this table

================================================================================
5. Examples											*material.nvim-examples*

Example config in Lua:

	-- Theme style
	vim.g.material_style = 'deep ocean'

    -- Colorscheme settings
	require('material').setup({
		contrast = {
			sidebars = true,
			floating_windows = false,
			line_numbers = false,
			sign_column = false,
			cursor_line = true,
			popup_menu = false
		},
		italics = {
			comments = true,
			strings = false,
			keywords = true,
			functions = true,
			variables = false
		},
		contrast_filetypes = {
			"terminal",
			"packer",
			"qf",
		},
		disable = {
			borders = true,
			background = false,
			term_colors = false,
			eob_lines = false
		},
	})

    -- Apply the colorscheme
    vim.cmd[[colorscheme material]]

If you want to use the custom_highlights table, this is how you would use it:

require('material').setup({
	...
	custom_highlights = {
		Function = { fg = "#00FF00", bg = "#FF0000", gui = "bold" },
		TelescopePromptBorder = { fg = "#0A0A0A", bg = "#000000" }
	}
	...
})

Just put the name of the highlight group as the name of a table, and pass in
the values for fg, bg, gui, guisp

================================================================================
6. Functions                                           *material.nvim-functions*

Material.nvim has built in functions that you can call or bind to a key

    + Toggle trough styles without the need to restart NeoVim
          Just call the funciton and it will switch to the next style:
          :lua require('material.functions').toggle_style()~

    + Switch to a specific style
          Call the function for switching and pass in the name of the style
          that you want to switch to:
          :lua require('material.functions').change_style('palenight')~

    + Toggle the end of buffer lines
          Call this function if you want to toggle the visibility of the lines at the end of
          the buffer: 
          :lua require('material.functions').toggle_eob()~

================================================================================
7. Mappings                                             *material.nvim-mappings*

You can map the built-in functions to keys
This will allow you to change the style and toggle the end-of-buffer lines
at keypress

Example:

nnoremap <leader>mm :lua require('material.functions').toggle_style()<CR>

nnoremap <leader>me :lua require('material.functions').toggle_eob()<CR>

nnoremap <leader>md :luarequire('material.functions').change_style('darker')<CR>
nnoremap <leader>ml :luarequire('material.functions').change_style('lighter')<CR>

================================================================================
vim:tw=78:ts=4:ft=help:norl:
