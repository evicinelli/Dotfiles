#! /usr/bin/env bash

# A very simple yet super effective (at least, for me) cli todo manager
# Depends on: vim, date, standard bash utilities, todo.txt format

TD=${TD:-"$HOME/todo.txt"}
DN=${DN:-"$HOME/done.txt"}

todo-edit() {
[[ $# -gt 0 ]] && \
    $EDITOR $TD +/$(echo ${*} | sed "s/ /.*/") || $EDITOR $TD
}

todo-add(){
priority_or_done_pattern="^(\([A-Z]\))|^x "
if [[ $# -gt 0 ]]; then
    pri=""
    arg=$(echo $* | grep -o "due:.*$" | sed "s/due://")
    d=$(date +%F -d "$arg")
    date_exit_status=$?
    preTask=$(echo "$*" | sed "s/due:.*$/due:$d/") # Date in correct format
    pri=$(echo "$*" | egrep -o "$priority_or_done_pattern") # Get priority or done state
    task=$(echo "$preTask" | sed -E "s/$priority_or_done_pattern//") # remove everything that matched
    if [[ $# -gt 0 ]]; then
        if [[ $date_exit_status -eq 0 ]]; then
            echo "$pri $(date -I) $task" | sed "s/^ //" >> $TD
        fi
    fi
else
    echo "todo-add (A) task +project @context due:<date in \`date -d\` compatible format>"
fi
}

todo-ls() {
    if [[ $# -gt 0 ]]; then
        if date -d "$*" > /dev/null 2>&1; then
            cat $TD | grep -v "^x .*" | grep -Gi "due:$(date +%F --date="$*")"
        else
            args="$(echo $* | sed -e "s/\ /.*/g")" # space -> .*
            cat $TD | grep -v "^x" | grep -Gi "$args" $TD
        fi
    else
        cat $TD  | grep -v "^x .*" | grep "due:$(date +%F --date="today")"
    fi
}

todo-done () {
    if [[ $# -gt 0 ]]; then
        QUERY=$(echo $* | sed -e "s/\ /.*/g")
        ENTRY=$(grep -i "$QUERY" $TD | grep -v "^x .*")
        ENTRIES_NO=$(echo -e "$ENTRY" | grep -v "^$"| wc -l)
        [[ $ENTRIES_NO -gt 0 ]] || (echo "Nada de nada, mi sa che hai scritto male" && exit)
        [[ $ENTRIES_NO -gt 1 ]] && ENTRY=$(echo -e "$ENTRY" | fzf)
    else
        ENTRY=$(cat $TD | fzf)
    fi

    echo -e "Marco come completato: $ENTRY"
    sed -i "s/$ENTRY/x $(date +%F)\ &/" $TD
}

function todo-agenda(){
    end=${1:-6} # if not $2, by default print todos for next 6 days
    [[ $end -gt 0 ]] && days=$(seq 0 $end) || days=$(seq $end 0)
    for i in $days; do
        t=$(todo-ls $i days)
        day_title="- $(date +%a\ %x -d "$i days") ($i days) --\n"
        if tty -s; then
            [[ ! -z "$t" ]] && echo -e "\e[1;31m${day_title}\e[0;37m${t}\n"
        else
            [[ ! -z "$t" ]] && echo -e "${day_title}${t}\n"
        fi
    done;
    echo
}

function todo-past(){
    local IFS=""
    end=${1:-100} # if not $2, by default print todos for the past 100 days
    for (( i=$end; i>0; i-- )) do
        t=$(todo-ls -$i days);
        [[ ! -z "$t" ]] && echo $t;
    done;
}

function todo-someday(){
    cat $TD | grep -v "due:.*$"
}

function todo-ls-proj(){
    readarray tags < <(grep -o "@.[a-z]*" $TD | sort | uniq)
    for tag in ${tags[*]}; do
        echo -ne "\n- $tag --\n"
        cat $TD | grep -v "^x" | grep "$tag"
    done
}

function todo-ls-tags(){
    readarray tags < <(grep -o "\+.\w*" $TD | sort | uniq)
    for tag in ${tags[*]}; do
        echo -ne "\n- $tag --- \n"
        cat $TD | grep -v "^x" | grep "$tag"
    done
}

todo-urgent (){
    todo-ls $* | grep -e "^([A-E])"
}

usage (){
cat <<EOH

USAGE

    todo <command> [argument]

COMMANDS

    a   add         add [argument] as a new task. If a due date is set, it must be specified in a \`date -d\` compatible format
    g   agenda      list tasks for the next 6 days
    d   done        set task containing [argument] as done
    e   edit        edit $TD
    l   ls          list today's tasks
    p   past        list overdue tasks
    j   proj        list tasks grouped by @project
    s   someday     list tasks which do not have a due date
    t   tags        list tasks grouped by +tags
EOH
}

# Main
case $1 in
    "add"|"a") shift; todo-add $*;;
    "agenda"|"g") shift; todo-agenda $*;;
    "done"|"d") shift; todo-done $*;;
    "edit"|"e") shift; todo-edit $*;;
    "ls"|"l") shift; todo-ls $*;;
    "past"|"p") shift; todo-past $*;;
    "proj"|"j") shift; todo-ls-proj $*;;
    "someday"|"s") shift; todo-someday $*;;
    "tags"|"t") shift; todo-ls-tags $*;;
    "urgent" | "u") shift; todo-urgent $*;;
    "h") usage ;;
    *) todo-ls $* ;;
esac
